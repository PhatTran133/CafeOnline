// <auto-generated />
using System;
using BussinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BussinessObjects.Migrations
{
    [DbContext(typeof(CoffeeShopContext))]
    partial class CoffeeShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BussinessObjects.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deletedDate");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("totalPrice");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.CartToppingDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cartId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("ToppingDrinkId")
                        .HasColumnType("int")
                        .HasColumnName("toppingDrinkId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ToppingDrinkId");

                    b.ToTable("CartToppingDrink", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Size")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("size");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Drink", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.DrinkTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DrinkId")
                        .HasColumnType("int")
                        .HasColumnName("drinkId");

                    b.Property<int?>("ToppingId")
                        .HasColumnType("int")
                        .HasColumnName("toppingId");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("ToppingId");

                    b.ToTable("DrinkTopping", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.OrderToppingDrink", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("ToppingDrinkId")
                        .HasColumnType("int")
                        .HasColumnName("toppingDrinkId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToppingDrinkId");

                    b.ToTable("OrderToppingDrink", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deletedDate");

                    b.Property<string>("Detail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("detail");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.TblNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblNotification", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.TblOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deletedDate");

                    b.Property<bool?>("StatusOfOder")
                        .HasColumnType("bit")
                        .HasColumnName("statusOfOder");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblOrder", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.TblUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("tblUser", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updatedDate");

                    b.HasKey("Id");

                    b.ToTable("Topping", (string)null);
                });

            modelBuilder.Entity("BussinessObjects.Models.Cart", b =>
                {
                    b.HasOne("BussinessObjects.Models.TblUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Cart_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Models.CartToppingDrink", b =>
                {
                    b.HasOne("BussinessObjects.Models.Cart", "Cart")
                        .WithMany("CartToppingDrinks")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartToppi__cartI__38996AB5");

                    b.HasOne("BussinessObjects.Models.DrinkTopping", "ToppingDrink")
                        .WithMany("CartToppingDrinks")
                        .HasForeignKey("ToppingDrinkId")
                        .HasConstraintName("FK__CartToppi__toppi__398D8EEE");

                    b.Navigation("Cart");

                    b.Navigation("ToppingDrink");
                });

            modelBuilder.Entity("BussinessObjects.Models.Drink", b =>
                {
                    b.HasOne("BussinessObjects.Models.Category", "Category")
                        .WithMany("Drinks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Drink__categoryI__3A81B327");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BussinessObjects.Models.DrinkTopping", b =>
                {
                    b.HasOne("BussinessObjects.Models.Drink", "Drink")
                        .WithMany("DrinkToppings")
                        .HasForeignKey("DrinkId")
                        .HasConstraintName("FK__DrinkTopp__drink__3B75D760");

                    b.HasOne("BussinessObjects.Models.Topping", "Topping")
                        .WithMany("DrinkToppings")
                        .HasForeignKey("ToppingId")
                        .HasConstraintName("FK__DrinkTopp__toppi__3C69FB99");

                    b.Navigation("Drink");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("BussinessObjects.Models.OrderToppingDrink", b =>
                {
                    b.HasOne("BussinessObjects.Models.TblOrder", "Order")
                        .WithMany("OrderToppingDrinks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderTopp__order__3D5E1FD2");

                    b.HasOne("BussinessObjects.Models.DrinkTopping", "ToppingDrink")
                        .WithMany("OrderToppingDrinks")
                        .HasForeignKey("ToppingDrinkId")
                        .HasConstraintName("FK__OrderTopp__toppi__3E52440B");

                    b.Navigation("Order");

                    b.Navigation("ToppingDrink");
                });

            modelBuilder.Entity("BussinessObjects.Models.Payment", b =>
                {
                    b.HasOne("BussinessObjects.Models.TblOrder", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Payment__orderId__3F466844");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BussinessObjects.Models.TblNotification", b =>
                {
                    b.HasOne("BussinessObjects.Models.TblUser", "User")
                        .WithMany("TblNotifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tblNotification_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Models.TblOrder", b =>
                {
                    b.HasOne("BussinessObjects.Models.TblUser", "User")
                        .WithMany("TblOrders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_tblOrder_tblUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BussinessObjects.Models.Cart", b =>
                {
                    b.Navigation("CartToppingDrinks");
                });

            modelBuilder.Entity("BussinessObjects.Models.Category", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("BussinessObjects.Models.Drink", b =>
                {
                    b.Navigation("DrinkToppings");
                });

            modelBuilder.Entity("BussinessObjects.Models.DrinkTopping", b =>
                {
                    b.Navigation("CartToppingDrinks");

                    b.Navigation("OrderToppingDrinks");
                });

            modelBuilder.Entity("BussinessObjects.Models.TblOrder", b =>
                {
                    b.Navigation("OrderToppingDrinks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BussinessObjects.Models.TblUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("TblNotifications");

                    b.Navigation("TblOrders");
                });

            modelBuilder.Entity("BussinessObjects.Models.Topping", b =>
                {
                    b.Navigation("DrinkToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
